version: 2.1
jobs:
  vor_backend_test:
    docker:
      - image: golang:1.15
      - image: minio/minio:latest
        entrypoint: sh
        command: -c 'mkdir -p /data/media && /usr/bin/minio server /data'
        environment:
          MINIO_ACCESS_KEY: AKIAIOSFODNN7EXAMPLE
          MINIO_SECRET_KEY: wJalrXUtnFEMIK7MDENGbPxRfiCYEXAMPLEKEY
          MINIO_HTTP_TRACE: "/dev/stdout"
      - image: circleci/postgres:11
        environment:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: defaultdb
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for minio
          command: dockerize -wait tcp://localhost:9000 -timeout 1m
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: |
          cd apps/vor/
          mkdir test_result
          mkdir test_result/go
          go get gotest.tools/gotestsum
          PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
          gotestsum --junitfile test_result/go/gotestsum-report.xml -- $PACKAGE_NAMES -v -coverprofile=coverage.txt -covermode=atomic -coverpkg $(go list ./... | grep -v "test" | paste -s -d",")
      - run: bash <(curl -s https://codecov.io/bash)
      - store_test_results:
          path: apps/vor/test_result

  install_js_deps:
    docker:
      - image: node:12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - build-v8-{{ checksum "yarn.lock" }}
      - run: |
          yarn install --frozen-lockfile
      - persist_to_workspace:
          root: ../
          paths:
            - repo/node_modules
            - repo/apps/gaia/node_modules
            - repo/apps/freyr/node_modules
            - repo/apps/e2e/node_modules
            - repo/apps/vor/frontend/node_modules
            - .cache/Cypress
      - save_cache:
          when: always
          name: Save Yarn Package Cache
          key: build-v8-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ~/.cache/Cypress
            - ./node_modules
            - ./apps/gaia/node_modules
            - ./apps/freyr/node_modules
            - ./apps/e2e/node_modules
            - ./apps/vor/frontend/node_modules

  vor_frontend_build:
    docker:
      - image: node:12
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ../
      - run: |
          mv ./apps/vor/frontend/.babelrc.ci.json ./apps/vor/frontend/.babelrc
      - run: |
          yarn workspace vor build
      - persist_to_workspace:
          root: ../
          paths:
            - ./repo/apps/vor/frontend/public

  gaia_build:
    docker:
      - image: node:12
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ../
      - run: |
          yarn workspace gaia build
      - persist_to_workspace:
          root: ../
          paths:
            - ./repo/apps/gaia/.next

  vor_snapshot_test:
    docker:
      - image: node:12
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ../
      - run: |
          yarn workspace vor test -w 1
      - run: bash <(curl -s https://codecov.io/bash)

  node_lint:
    docker:
      - image: node:12
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ../
      - run: |
          yarn workspaces run lint

  node_typecheck:
    docker:
      - image: node:12
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: ../
      - run: |
          yarn workspaces run typecheck

  e2e:
    machine:
      image: ubuntu-1604:202004-01
    working_directory: ~/repo
    #    parallelism: 2
    steps:
      - checkout
      - run: cp .env.example .env
      - run:
          command: COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose up db vor_app nginx minio
          background: true
      - attach_workspace:
          at: ../
      - run: |
          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
          echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run: |
          nvm install v12
          node -v
          nvm alias default v12
      - run: npm install -g yarn
      - run:
          command: yarn workspace gaia start
          background: true
      - run: |
          yarn workspace e2e run cy:ci
      - run: bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: ~/repo/apps/e2e/cypress/screenshots
          destination: cypress-screenshots

  deploy:
    machine:
      image: ubuntu-1604:202004-01
    working_directory: ~/repo
    steps:
      - checkout
      - run: |
          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
          echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run: |
          nvm install v12
          node -v
          nvm alias default v12
      - run: |
          git config --global user.email "chrsep@protonmail.com"
          git config --global user.name "Chrisando Pramudhita"
      - run: |
          npm install -g standard-version
          standard-version -m 'chore(release): %s [skip ci]' --releaseCommitMessageFormat --no-verify
      - run: |
          git push --follow-tags origin master
      - run: |
          echo "GA_CLIENT_EMAIL=$GA_CLIENT_EMAIL" >> .env
          echo "GA_PRIVATE_KEY=$GA_PRIVATE_KEY" >> .env
      - run: |
          VERSION=$(cat VERSION)
          DOCKER_BUILDKIT=1 docker build -f ./docker/vor/prod.dockerfile  -t "obserfy/vor:$VERSION" . --secret id=env,src=.env
          DOCKER_BUILDKIT=1 docker build --build-arg NEXT_PUBLIC_GAIA_SEGMENT_KEY -f ./docker/gaia/prod.dockerfile  -t "obserfy/gaia:$VERSION"  .
      - run: |
          VERSION=$(cat VERSION)
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_LOGIN" --password-stdin
          docker push obserfy/vor:$VERSION
          docker push obserfy/gaia:$VERSION
      - run: |
          npm install -g @sentry/cli
      - run: |
          VERSION=$(cat VERSION)
          sentry-cli releases -p frontend new $VERSION
          sentry-cli releases -p frontend set-commits --auto $VERSION
          sentry-cli releases -p frontend finalize $VERSION
      - run: |
          VERSION=$(sentry-cli releases propose-version)
          sentry-cli releases -p backend new $VERSION
          sentry-cli releases -p backend set-commits --auto $VERSION
          sentry-cli releases -p backend finalize $VERSION

orbs:
  go: circleci/go@1.4.0

workflows:
  version: 2
  vor:
    jobs:
      - vor_backend_test:
          filters:
            branches:
              ignore: gh-pages
      - install_js_deps:
          filters:
            branches:
              ignore: gh-pages

      - vor_frontend_build:
          requires:
            - install_js_deps
      - gaia_build:
          requires:
            - install_js_deps
      - node_lint:
          requires:
            - install_js_deps
      - node_typecheck:
          requires:
            - install_js_deps

      - vor_snapshot_test:
          requires:
            - vor_frontend_build
      - e2e:
          requires:
            - vor_backend_test
            - vor_frontend_build
            - gaia_build

      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - e2e
            - vor_backend_test
            - vor_snapshot_test
            - node_lint
            - node_typecheck
